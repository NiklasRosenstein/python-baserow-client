{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"baserow-client","text":"<p>A Python client for Baserow.io with simple ORM capabilities.</p> <p>Note: This package is currently under development. Some APIs may break without prior notice.</p> <p>Installation</p> <pre><code>$ pip install baserow-client\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#060-2023-05-13","title":"0.6.0 (2023-05-13)","text":"TypeDescriptionPRIssuesAuthor Improvement  add support for baserow 1.16.0 workspaces, trailing slashes on urls7@luc-languagetools Improvement  Upgrade from `databind 1.x` to `4.x`8@NiklasRosenstein"},{"location":"changelog/#051-2022-03-24","title":"0.5.1 (2022-03-24)","text":"TypeDescriptionPRIssuesAuthor Hygiene  update project structure to use Poetry as the build system and Slap for tooling@NiklasRosenstein"},{"location":"changelog/#050-2021-10-22","title":"0.5.0 (2021-10-22)","text":"TypeDescriptionPRIssuesAuthor Feature  add `User.language` field6@dretay"},{"location":"changelog/#040-2021-09-16","title":"0.4.0 (2021-09-16)","text":"TypeDescriptionPRIssuesAuthor Improvement  rename `LinkedTableCollection` to `LinkedRow` and moved it to `baserow.orm.column`@NiklasRosenstein Improvement  add `Column.from_baserow()`@NiklasRosenstein Improvement  add `ColumnPlaceholderTranslator` helper class@NiklasRosenstein Docs  add a bunch of docstrings to the ORM classes@NiklasRosenstein Feature  add `BaserowClient.create_database_table_row()`, `BaserowClient.update_database_table_row()` and `Database.save()`@NiklasRosenstein Feature  add `BaserowClient.create_user()`@dermasmid"},{"location":"changelog/#030-2021-09-13","title":"0.3.0 (2021-09-13)","text":"TypeDescriptionPRIssuesAuthor Feature  add `Query.first()`, `BaserowOrmException` and `NoRowReturned`@NiklasRosenstein"},{"location":"changelog/#021-2021-09-13","title":"0.2.1 (2021-09-13)","text":"TypeDescriptionPRIssuesAuthor Fix  fix readme example@NiklasRosenstein"},{"location":"changelog/#020-2021-09-13","title":"0.2.0 (2021-09-13)","text":"TypeDescriptionPRIssuesAuthor Feature  add `BaserowClient.login()`, `BaserowClient.load()` and `BaserowClient.save()`@NiklasRosenstein Feature  support `boolean`, `long_text` and `file` fields@NiklasRosenstein Feature  add simple ORM capabilities@NiklasRosenstein Feature  add `BaserowClient.get_database_table_row()`@NiklasRosenstein Feature  add `Column.link_row_has()` and `Column.link_row_has_not()`@NiklasRosenstein"},{"location":"changelog/#011-2021-09-12","title":"0.1.1 (2021-09-12)","text":"TypeDescriptionPRIssuesAuthor Fix  add missing dependencies@NiklasRosenstein"},{"location":"getting-started/","title":"Getting started","text":"<p>The Baserow client provides direct access to many of the Baserow API endpoints. It must be initialized with the URL to your Baserow instance as well as a JWT or Token. Without authentication, the client may still be used to generate a JWT from user credentials.</p> <p>Examples:</p> <pre><code>from baserow.client import BaserowClient\n\nclient = BaserowClient('https://baserow.io', jwt='...')\nclient = BaserowClient('https://baserow.io', token='...')\n\nclient = BaserowClient('https://baserow.io')\nuser, jwt = client.token_auth('username', 'password')\n</code></pre> <p>If you use the <code>login()</code> method instead of <code>token_auth()</code>, the JWT will be installed into the same client right away. Many of the administrative Baserow APIs require a JWT (such as listing available applications, i.e. databases, creating users, etc.).</p> <p>Examples:</p> <pre><code>for db in client.list_all_applications():\n  print(db, [t.name for t in db.tables])\n\nfor table in client.list_database_tables(13):\n  print(table)\n\nfor field in client.list_database_table_fields(45):\n  print(field)\n</code></pre> <p>CRUD operations on tables can be performed with a long-lived API token that can be generated via Baserow UI (there's an endpoint as well but the Python client does not currently provide it).</p> <p>Example:</p> <pre><code>is_john_smith = Column('field_281').equal('John Smith')\npage = client.list_database_table_rows(45, filter=[is_john_smith])\nprint(page.results)\n\nclient.create_database_table_row(45, {\n  'field_281': 'Alice Doe',\n  'field_293': 'alice@doe.org',\n})\n</code></pre> <p>Try the the <code>paginate_database_table_rows()</code> method to conveniently iterate over all pages.</p>"},{"location":"orm/","title":"Baserow ORM","text":"<p>The Baserow Python client comes with basic ORM capabilities.</p> <p>Note: The ORM API is not Mypy compatible. Support could be added by implementing a Mypy plugin.</p>"},{"location":"orm/#defining-models","title":"Defining models","text":"<pre><code># myapp/models.py\n\nfrom baserow.orm import Column, ForeignKey, Model\n\nclass Product(Model):\n  name = Column('Name')\n  price = Column('Price')\n\nclass Customer(Model):\n  name = Column('Name')\n  favorite_products = ForeignKey('Favorite Products', Product)\n</code></pre>"},{"location":"orm/#generating-a-database-mapping","title":"Generating a database mapping","text":"<p>Because the database schema cannot be introspected using a normal token, it is necessary to generate a mapping for the ORM using a JWT. The easiest way to do this is to use the Baserow ORM command-line interface.</p> <pre><code>$ python -m baserow.orm \\\n    'My web shop' myapp.models.Product:Produces myapp.models.Customer:Customers \\\n    --url https://baserow.io --user my-email@example.org --write-to var/conf/mapping.json\n</code></pre> <p>You can specify <code>--password '...'</code> to avoid the password prompt, or directly pass a JWT with <code>--jwt '...'</code>.</p> <p>Database connection</p> <p>The database connection must be initialized with a Baserow client and the database mapping that was generated in the previous step. Since the ORM can only perform CRUD operations, a long-lived token can (or should) be used.</p> <pre><code># myapp/__main__.py\n\nfrom baserow.client import BaserowClient\nfrom baserow.orm import Database, DatabaseMapping\nfrom .models import Product, Customer\n\nclient = BaserowClient('https://baserow.io', token='...')\ndb = Database(client, DatabaseMapping.load('var/data/mapping.json'))\n</code></pre>"},{"location":"orm/#querying","title":"Querying","text":"<p>When querying rows from Baserow with the ORM interface, you are working with instances of the <code>Model</code> subclasses that you have defined previously. Linked rows are queried lazily (i.e. iterating over <code>Customer.favorite_products</code> will fetch each linked <code>Product</code> from Baserow).</p> <pre><code>query = db.select(Customer).filter(Customer.name.contains('Alice'))\n\nprint('Alice likes:')\nfor product in query.first().favorite_products:\n  print(f'- {product.name}')\n</code></pre> <p>Note: Fetching linked rows currently happens individually and can thus be rather slow. More information at baserow#601. You can still access the raw <code>(id, name)</code> pairs returned by the Baserow API for the ori</p> <p>The <code>Database.save()</code> currently provides very naive implementation to save new or update existing rows. It does not currently handle <code>single_select</code> and <code>link_row</code> fields properly.</p> <pre><code>row = Product(id=None, name='Soy beans', price=1.99)\ndb.save(row)\nprint(row.id)\n</code></pre> <p>Copyright \u00a9 2021 Niklas Rosenstein</p>"},{"location":"api/client/","title":"Client","text":""},{"location":"api/client/#class-baseclient","title":"Class BaseClient","text":"<pre><code>class BaseClient()\n</code></pre> <p>[view_source]</p> <p>Base class for the Baserow client which handles the authentication and request session.</p> <p>A JWT is needed when performing requests that are scoped to user interactions (e.g. operations that are expected to be run through the UI). A token should be used if only a subset of the Baserow API is used to create/read/write/delete rows.</p> <p></p> <p></p>"},{"location":"api/client/#class-baserowclient","title":"Class BaserowClient","text":"<pre><code>class BaserowClient(BaseClient)\n</code></pre> <p>[view_source]</p> <p>Client for Baserow servers.</p> <p></p> <p></p>"},{"location":"api/client/#login","title":"login","text":"<pre><code>def login(username: str,\n          password: str,\n          cache: t.Union[bool, str] = False) -&gt; User\n</code></pre> <p>[view_source]</p> <p>A convenience method to log into Baserow using the specified username and password and updating the current client object. If cache is enabled or is a filename, it will be used to load a cached token for the Baserow URL and username combination to reuse a previously generated JWT. If the reused JWT is not valid anymore, the credentials will be used to generate a new one.</p> <p></p> <p></p>"},{"location":"api/client/#load","title":"load","text":"<pre><code>def load(username: str,\n         filename: t.Optional[str] = None,\n         raise_: bool = False,\n         refresh: bool = True) -&gt; t.Optional[User]\n</code></pre> <p>[view_source]</p> <p>Loads an existing JWT from the given filename or the <code>DEFAULT_CREDENTIALS_FILE</code>. Returns <code>True</code> if a token was loaded, <code>False</code> otherwise. If a token is loaded, it will be immediately refreshed.</p> <p></p> <p></p>"},{"location":"api/client/#save","title":"save","text":"<pre><code>def save(username: str, filename: t.Optional[str] = None) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Saves the JWt of the client into filename or the given <code>DEFAULT_CREDENTIALS_FILE</code>.</p>"},{"location":"api/filter/","title":"Filter","text":""},{"location":"api/filter/#class-column","title":"Class Column","text":"<pre><code>class Column()\n</code></pre> <p>[view_source]</p> <p>A helper class to build <code>Filters</code>.</p>"}]}