{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"baserow-client A Python client for Baserow.io with simple ORM capabilities. Note : This package is currently under development. Some APIs may break without prior notice. Installation $ pip install baserow-client","title":"baserow-client"},{"location":"#baserow-client","text":"A Python client for Baserow.io with simple ORM capabilities. Note : This package is currently under development. Some APIs may break without prior notice. Installation $ pip install baserow-client","title":"baserow-client"},{"location":"changelog/","text":"Changelog 0.5.0 (2021-10-22) general feature : add User.language field (@dretay) (#6) 0.4.0 (2021-09-16) general change : rename LinkedTableCollection to LinkedRow and moved it to baserow.orm.column change : add Column.from_baserow() change : add ColumnPlaceholderTranslator helper class docs : add a bunch of docstrings to the ORM classes feature : add BaserowClient.create_database_table_row() , BaserowClient.update_database_table_row() and Database.save() feature : add BaserowClient.create_user() (@dermasmid) 0.3.0 (2021-09-13) general feature : add Query.first() , BaserowOrmException and NoRowReturned 0.2.1 (2021-09-13) general fix : fix readme example 0.2.0 (2021-09-13) general feature : add BaserowClient.login() , BaserowClient.load() and BaserowClient.save() feature : support boolean , long_text and file fields feature : add simple ORM capabilities feature : add BaserowClient.get_database_table_row() feature : add Column.link_row_has() and Column.link_row_has_not() 0.1.1 (2021-09-12) general fix : add missing dependencies","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#050-2021-10-22","text":"general feature : add User.language field (@dretay) (#6)","title":"0.5.0 (2021-10-22)"},{"location":"changelog/#040-2021-09-16","text":"general change : rename LinkedTableCollection to LinkedRow and moved it to baserow.orm.column change : add Column.from_baserow() change : add ColumnPlaceholderTranslator helper class docs : add a bunch of docstrings to the ORM classes feature : add BaserowClient.create_database_table_row() , BaserowClient.update_database_table_row() and Database.save() feature : add BaserowClient.create_user() (@dermasmid)","title":"0.4.0 (2021-09-16)"},{"location":"changelog/#030-2021-09-13","text":"general feature : add Query.first() , BaserowOrmException and NoRowReturned","title":"0.3.0 (2021-09-13)"},{"location":"changelog/#021-2021-09-13","text":"general fix : fix readme example","title":"0.2.1 (2021-09-13)"},{"location":"changelog/#020-2021-09-13","text":"general feature : add BaserowClient.login() , BaserowClient.load() and BaserowClient.save() feature : support boolean , long_text and file fields feature : add simple ORM capabilities feature : add BaserowClient.get_database_table_row() feature : add Column.link_row_has() and Column.link_row_has_not()","title":"0.2.0 (2021-09-13)"},{"location":"changelog/#011-2021-09-12","text":"general fix : add missing dependencies","title":"0.1.1 (2021-09-12)"},{"location":"getting-started/","text":"Getting started The Baserow client provides direct access to many of the Baserow API endpoints. It must be initialized with the URL to your Baserow instance as well as a JWT or Token. Without authentication, the client may still be used to generate a JWT from user credentials. Examples: from baserow.client import BaserowClient client = BaserowClient('https://baserow.io', jwt='...') client = BaserowClient('https://baserow.io', token='...') client = BaserowClient('https://baserow.io') user, jwt = client.token_auth('username', 'password') If you use the login() method instead of token_auth() , the JWT will be installed into the same client right away. Many of the administrative Baserow APIs require a JWT (such as listing available applications, i.e. databases, creating users, etc.). Examples: for db in client.list_all_applications(): print(db, [t.name for t in db.tables]) for table in client.list_database_tables(13): print(table) for field in client.list_database_table_fields(45): print(field) CRUD operations on tables can be performed with a long-lived API token that can be generated via Baserow UI (there's an endpoint as well but the Python client does not currently provide it). Example: is_john_smith = Column('field_281').equal('John Smith') page = client.list_database_table_rows(45, filter=[is_john_smith]) print(page.results) client.create_database_table_row(45, { 'field_281': 'Alice Doe', 'field_293': 'alice@doe.org', }) Try the the paginate_database_table_rows() method to conveniently iterate over all pages.","title":"Getting started"},{"location":"getting-started/#getting-started","text":"The Baserow client provides direct access to many of the Baserow API endpoints. It must be initialized with the URL to your Baserow instance as well as a JWT or Token. Without authentication, the client may still be used to generate a JWT from user credentials. Examples: from baserow.client import BaserowClient client = BaserowClient('https://baserow.io', jwt='...') client = BaserowClient('https://baserow.io', token='...') client = BaserowClient('https://baserow.io') user, jwt = client.token_auth('username', 'password') If you use the login() method instead of token_auth() , the JWT will be installed into the same client right away. Many of the administrative Baserow APIs require a JWT (such as listing available applications, i.e. databases, creating users, etc.). Examples: for db in client.list_all_applications(): print(db, [t.name for t in db.tables]) for table in client.list_database_tables(13): print(table) for field in client.list_database_table_fields(45): print(field) CRUD operations on tables can be performed with a long-lived API token that can be generated via Baserow UI (there's an endpoint as well but the Python client does not currently provide it). Example: is_john_smith = Column('field_281').equal('John Smith') page = client.list_database_table_rows(45, filter=[is_john_smith]) print(page.results) client.create_database_table_row(45, { 'field_281': 'Alice Doe', 'field_293': 'alice@doe.org', }) Try the the paginate_database_table_rows() method to conveniently iterate over all pages.","title":"Getting started"},{"location":"orm/","text":"Baserow ORM The Baserow Python client comes with basic ORM capabilities. Note : The ORM API is not Mypy compatible. Support could be added by implementing a Mypy plugin. Defining models # myapp/models.py from baserow.orm import Column, ForeignKey, Model class Product(Model): name = Column('Name') price = Column('Price') class Customer(Model): name = Column('Name') favorite_products = ForeignKey('Favorite Products', Product) Generating a database mapping Because the database schema cannot be introspected using a normal token, it is necessary to generate a mapping for the ORM using a JWT. The easiest way to do this is to use the Baserow ORM command-line interface. $ python -m baserow.orm \\ 'My web shop' myapp.models.Product:Produces myapp.models.Customer:Customers \\ --url https://baserow.io --user my-email@example.org --write-to var/conf/mapping.json You can specify --password '...' to avoid the password prompt, or directly pass a JWT with --jwt '...' . Database connection The database connection must be initialized with a Baserow client and the database mapping that was generated in the previous step. Since the ORM can only perform CRUD operations, a long-lived token can (or should) be used. # myapp/__main__.py from baserow.client import BaserowClient from baserow.orm import Database, DatabaseMapping from .models import Product, Customer client = BaserowClient('https://baserow.io', token='...') db = Database(client, DatabaseMapping.load('var/data/mapping.json')) Querying When querying rows from Baserow with the ORM interface, you are working with instances of the Model subclasses that you have defined previously. Linked rows are queried lazily (i.e. iterating over Customer.favorite_products will fetch each linked Product from Baserow). query = db.select(Customer).filter(Customer.name.contains('Alice')) print('Alice likes:') for product in query.first().favorite_products: print(f'- {product.name}') Note: Fetching linked rows currently happens individually and can thus be rather slow. More information at baserow#601 . You can still access the raw (id, name) pairs returned by the Baserow API for the ori The Database.save() currently provides very naive implementation to save new or update existing rows. It does not currently handle single_select and link_row fields properly. row = Product(id=None, name='Soy beans', price=1.99) db.save(row) print(row.id) Copyright \u00a9 2021 Niklas Rosenstein","title":"Baserow ORM"},{"location":"orm/#baserow-orm","text":"The Baserow Python client comes with basic ORM capabilities. Note : The ORM API is not Mypy compatible. Support could be added by implementing a Mypy plugin.","title":"Baserow ORM"},{"location":"orm/#defining-models","text":"# myapp/models.py from baserow.orm import Column, ForeignKey, Model class Product(Model): name = Column('Name') price = Column('Price') class Customer(Model): name = Column('Name') favorite_products = ForeignKey('Favorite Products', Product)","title":"Defining models"},{"location":"orm/#generating-a-database-mapping","text":"Because the database schema cannot be introspected using a normal token, it is necessary to generate a mapping for the ORM using a JWT. The easiest way to do this is to use the Baserow ORM command-line interface. $ python -m baserow.orm \\ 'My web shop' myapp.models.Product:Produces myapp.models.Customer:Customers \\ --url https://baserow.io --user my-email@example.org --write-to var/conf/mapping.json You can specify --password '...' to avoid the password prompt, or directly pass a JWT with --jwt '...' . Database connection The database connection must be initialized with a Baserow client and the database mapping that was generated in the previous step. Since the ORM can only perform CRUD operations, a long-lived token can (or should) be used. # myapp/__main__.py from baserow.client import BaserowClient from baserow.orm import Database, DatabaseMapping from .models import Product, Customer client = BaserowClient('https://baserow.io', token='...') db = Database(client, DatabaseMapping.load('var/data/mapping.json'))","title":"Generating a database mapping"},{"location":"orm/#querying","text":"When querying rows from Baserow with the ORM interface, you are working with instances of the Model subclasses that you have defined previously. Linked rows are queried lazily (i.e. iterating over Customer.favorite_products will fetch each linked Product from Baserow). query = db.select(Customer).filter(Customer.name.contains('Alice')) print('Alice likes:') for product in query.first().favorite_products: print(f'- {product.name}') Note: Fetching linked rows currently happens individually and can thus be rather slow. More information at baserow#601 . You can still access the raw (id, name) pairs returned by the Baserow API for the ori The Database.save() currently provides very naive implementation to save new or update existing rows. It does not currently handle single_select and link_row fields properly. row = Product(id=None, name='Soy beans', price=1.99) db.save(row) print(row.id) Copyright \u00a9 2021 Niklas Rosenstein","title":"Querying"}]}